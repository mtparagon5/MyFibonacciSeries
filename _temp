# Lesson 1.3 -- add to jn
my_name = "Guido van Rossum"

# Edit and uncomment the line below if you want to reassign the
# value of the `my_name variable.

my_name = "Matt"

print("Hello world, my name is " + my_name + ".")
while my_name == "Matt":
  users_name = input("What is yours?")
  print("Nice to meet you, " + users_name)
  break


###############################################


# Lesson 1.4
# Start by assigning a string to our variable.
food = "bacon"

# Let's see what the built-in `type()`function does.
type_of_food = type(food)
print(type_of_food)

# We can access the characters of a string by index with bracket
# notation, starting at index zero.
first_letter = food[0]
second_letter = food[1]
print("The first letter is " + first_letter)
print("The second letter is " + second_letter)

# We can use the built-in `len()` function to get a string's
# "length", or the number of characters it contains.
print(len(food))

# We can concatenate two strings together into one string with
# the `+` operator.
superfood = food + " and eggs"
print("I like " + superfood)

# We can fill in strings using the `.format()` string method.
name = "Sash"
cost = 3
demand = "I'll take {} shrubberies, {}! Thanks!"
print(demand.format(cost, name))

##############

import random
# Let's assign some variables to start with, including `None`
# in a couple places.
 
name = None
species = "Human"
weapon_of_choice = None

num_list = []
num_range = 50
for num in range(num_range):
  value = num + 1
  num_list.append(value)
#print(num_list)

strength = random.choice(num_list)
magic = random.choice(num_list)

#def random_color():
#    colors = ["blue", "octarine", "yellow", "red", "pink"]
#    return random.choice(colors)
#favorite_color = random_color()

favorite_color = None
profession = None

# Hm, maybe we haven't assigned a name yet...
if name is None:
    name = input("What is your name?")
    print("Fantastic, thanks {}!".format(name))

# adding favorite color input
if favorite_color is None:
  favorite_color = input("What is your favorite color, {}?".format(name))

# Every adventurer needs a profession.
if profession is None:
    print("{}, you are a {} who needs a profession".format(name, species))
    print("Your strength is {} and magic is {},".format(strength, magic))
    print("and your favorite color is {}".format(favorite_color))
    profession = input("What profession would you like?")

print("Welcome, {}. You are a {} {}.".format(name, species, profession))

# Once you've run the program go back and tweak your starting
# variables. Does that change the program's behavior?

# As a stretch goal, try setting `favorite_color` to None and
# getting user input by copying the logic for `name` and
# `profession`.

 
#################################################

Lesson 1.5


new_line = "\n"
# Start by assigning some lists to variables.
inventory = ["beans", "coin", "tome"]
tome_dimensions = [8.5, 11, 2]

# Lists in lists...
random_stuff = [True, 3.14, ["pie", "pizza", "automobile"]]
battleship_board = [[1, 1, 0], [1, 0, 1], [0, 0, 1]]

# Just like with strings you can access list elements by index
# with bracket notation. We start counting at zero:
print(inventory[0])
print(random_stuff[2])

# With nested lists you can continue digging down with additional
# indexes:
print(random_stuff[2][0])

# Lists have a particular length.
inventory_size = len(inventory)
print("You have {} items in your inventory".format(inventory_size))

print(new_line)

# Lists are easy to modify. We'll cover this in more detail later.
inventory.append("magic sword")
print("An item has been added to your inventory: \n" + str(inventory))
print("New item count = {}".format(len(inventory)))

# Can you think of a way to print 3.14 solely by referencing the
# variables above?
print(new_line)

print("pi, rounded to 2 decimal places, is {}".format(random_stuff[1]))

###############

# Here's a super simple dictionary:
person = {"name": "grae", "profession": "magician"}

# Dictionaries are great for grouping related data together.
# Let's make a dictionary with more data.

# Note how we split each key-value pair onto a new line. This
# can make dictionaries much easier to read.
hero = {
    "name": None,
    "species": "Human",
    "strength": 4,
    "magic": 5,
    "profession": None,
}

# Let's check the hero's name again. Just like lists, we use
# bracket notation.
if hero["name"] is None:
    # We modify dictionary values just like 
    # we access them.
    hero["name"] = input("What is your name?")
    print("Fantastic, thanks {}".format(hero["name"]))

# You can also add a new key-value pairs using the same bracket
# notation syntax.
hero["favorite_color"] = "Octarine"
print("Your assigned favorite color is {}".format(hero["favorite_color"]))

# Try inserting a line of code below this comment that changes
# the hero's `profession` from `None` to another value so the next
# print statement works well.
hero["profession"] = "swordsmith"

print("Ok {}, you are a {} {}.".format(hero["name"], hero["species"], hero["profession"]))

#################
